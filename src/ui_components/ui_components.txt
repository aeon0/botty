- Slots
	f: inspect slots
	f: _slot_has_item(slot_img: np.ndarray) -> bool:
	f: get_slot_pos_and_img(config: Config, img: np.ndarray, column: int, row: int) -> tuple[tuple[int, int],  np.ndarray]:
- Merc
	- merc_portrait
	- merc_life
- GameScreen
	f: is_overburdened(self) -> bool:
	f: repair_needed(self) -> bool:
	f: enable_no_pickup(self) -> bool:
	f: wait_for_town_spawn
	f: handle_death_screen
	f: pick_up_item(self, pos: Tuple[float, float], item_name: str = None, prev_cast_start: float = 0):
	- repair_needed
	- ammo_low
	- chat_box (might be same roi as is_overburdened? diablo walks? item pickup?)
	- enemy_name / enemy_health
	- enemy_info / enemy_resistances
	- death message
	- death button
- Belt:
	f: open/close
	f: get_pot_needs(self):
	f: should_buy_pots:
	f: should_buy_pots(self):
	f: _potion_type(self, img: np.ndarray)
	f: _cut_potion_img?
	f: fill_up_belt_from_inventory
	f: inspect slots
- PlayerBar
	f: get_experience
	- belt_row_1
- left skill
	- left skill
	f: is_left_skill_selected(self, template_list: List[str]) -> bool:
- Right skill
	- right_skill
	f: has_tps(self) -> bool:
	f: is_right_skill_active(self) -> bool:
	f: is_right_skill_selected(self, template_list: List[str]) -> bool:
    f:  _discover_capabilities(self) -> CharacterCapabilities:
    f:  discover_capabilities(self, force = False):
    f: on_capabilities_discovered(self, capabilities: CharacterCapabilities):
	f: skill_is_charged(self, img: np.ndarray = None) -> bool:
	f: is_low_on_teleport_charges(self):
    f: _remap_skill_hotkey(self, skill_asset, hotkey, skill_roi, expanded_skill_roi):
    f: remap_right_skill_hotkey(self, skill_asset, hotkey):
    f: def select_tp(self):
    f: get_skill_charges(self, img: np.ndarray = None):
- Slots
	- belt
	- right inventory
	- left inventory
	- cube
- Difficulty
	- normal
	- nightmare
	- hell
- Stash
	f: transfer_shared_to_private_gold (self, count: int):
    f: gambling_needed(self) -> bool:
    f: set__gold_full (self, bool: bool):
	f: _move_to_stash_tab(self, stash_idx: int):
	- tabs (personal, shared, shared, shared)
	- gold (different per tab)
- Vendor
	f: close_vendor_screen(self):
	f: repair_and_fill_up_tp(self) -> bool:
    f: gamble(self, item_finder: ItemFinder):
	f: buy_pots(self, healing_pots: int = 0, mana_pots: int = 0):
	- label (Stash vs Jamella)
	- tabs (weapons, misc, etc.)
	- btn_repair (if repair vendor)
	- btn_refresh (if gamble vendor)
- Cube
	- cube transmute

- Loading screens
	f: wait_for_loading_screen(self, time_out: float = None) -> bool:
	- door
	- blizz_splash
	- connect_to_bnet
	- queue
	- black_screen
	- others?
- Error screens
	- server issues?
- Main menu
    f: has_char_template_saved(self):
    f: save_char_template(self):
    f: save_char_online_status(self):
    f: select_online_tab(self, region: tuple[int, int, int, int] = None, center: tuple[int, int] = None):
    f: select_char(self):
	f:  start_game(self) -> bool:
	- btn_play (online vs. offline)
	- characters
	- tabs (online vs offline)
- Right inventory
	f: open/close inventory
	f: _inventory_has_items(self, img, num_loot_columns: int, num_ignore_columns=0) -> bool:
	f: _keep_item(self, item_finder: ItemFinder, img: np.ndarray, do_logging: bool = True) -> bool:
	f: stash_all_items(self, num_loot_columns: int, item_finder: ItemFinder, gamble = False):
	f: should_stash(self, num_loot_columns: int):
	- gear (not presently used)
	- weapon switch (not presently used)
	- slots
	- gold
	- btn_close (can be used to detect if panel is open)
- Save and Exit
	f: save_and_exit(self, does_chicken: bool = False) -> bool:
- Waypoints
	f: use_wp(self, act: int, idx: int):
	- tabs (acts)
	- waypoints (rows)
